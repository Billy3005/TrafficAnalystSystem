# -*- coding: utf-8 -*-
"""
Module Dashboard Streamlit ƒê·ªôc l·∫≠p.
(Phi√™n b·∫£n 6.0 - Logic K·∫øt lu·∫≠n Th√¥ng minh & Ng·ªØ c·∫£nh)
"""
import os
import sys
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# --- C·∫•u h√¨nh ƒê∆∞·ªùng d·∫´n ƒë·ªÉ import ƒë∆∞·ª£c app/ v√† config.py ---
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_ROOT)

# --- Import Flask app v√† models sau khi ƒë√£ th√™m sys.path ---
from app import create_app, db
from app.models import VehicleLog
from config import Config

# --- Kh·ªüi t·∫°o Flask app ---
app = create_app()


# --- H√ÄM PH√ÇN T√çCH T·ª∞ ƒê·ªòNG TH√îNG MINH ---
def generate_smart_conclusions(df: pd.DataFrame):
    if df.empty or df['vehicle_id'].nunique() < 3:
        return ["- Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra k·∫øt lu·∫≠n ƒë√°ng tin c·∫≠y (c·∫ßn √≠t nh·∫•t 3 l∆∞·ª£t xe)."]

    conclusions = []

    # --- 1. T√≠nh to√°n c√°c ch·ªâ s·ªë c∆° b·∫£n ---
    total_unique_vehicles = df['vehicle_id'].nunique()
    avg_speed_total = df['speed_kmh'].mean()
    duration_minutes = (df['timestamp'].max() - df['timestamp'].min()).total_seconds() / 60
    throughput = total_unique_vehicles / duration_minutes if duration_minutes > 0.1 else 0

    conclusions.append(f"### üîç **Ph√¢n t√≠ch T·ªïng quan:**")
    conclusions.append(f"- Trong kho·∫£ng **{duration_minutes:.1f} ph√∫t** ph√¢n t√≠ch, ƒë√£ ghi nh·∫≠n **{total_unique_vehicles}** l∆∞·ª£t ph∆∞∆°ng ti·ªán duy nh·∫•t.")
    conclusions.append(f"- **L∆∞u l∆∞·ª£ng trung b√¨nh (throughput)** ∆∞·ªõc t√≠nh l√† **{throughput:.1f} xe/ph√∫t**.")
    conclusions.append(f"- **T·ªëc ƒë·ªô trung b√¨nh** c·ªßa d√≤ng xe trong v√πng l√† **{avg_speed_total:.1f} km/h**.")

    # --- 2. Ph√¢n t√≠ch T√¨nh tr·∫°ng D√≤ng ch·∫£y ---
    density_per_5s = df.set_index('timestamp').resample('5s')['vehicle_id'].nunique().mean()

    flow_state = ""
    flow_color = "green"

    if avg_speed_total < 15 and density_per_5s > 5:
        flow_state = "√ôn t·∫Øc nghi√™m tr·ªçng"
        flow_color = "red"
    elif avg_speed_total < 25 and density_per_5s > 3:
        flow_state = "Di chuy·ªÉn ch·∫≠m, m·∫≠t ƒë·ªô cao"
        flow_color = "orange"
    elif throughput < 2 and total_unique_vehicles < 10:
        flow_state = "L∆∞u l∆∞·ª£ng th·∫•p, ƒë∆∞·ªùng v·∫Øng"
        flow_color = "gray"
    else:
        flow_state = "L∆∞u th√¥ng ·ªïn ƒë·ªãnh"

    conclusions.append(f"- **T√¨nh tr·∫°ng d√≤ng ch·∫£y:** D·ª±a tr√™n t·ªëc ƒë·ªô v√† m·∫≠t ƒë·ªô, t√¨nh tr·∫°ng giao th√¥ng ƒë∆∞·ª£c ƒë√°nh gi√° l√† **:{flow_color}[{flow_state}]**.")

    # --- 3. Ph√¢n t√≠ch Chi ti·∫øt ---
    conclusions.append(f"### üöó **Ph√¢n t√≠ch Chi ti·∫øt:**")
    avg_speed_by_type = df.groupby('class_name')['speed_kmh'].mean()
    if not avg_speed_by_type.empty:
        fastest_type = avg_speed_by_type.idxmax()
        slowest_type = avg_speed_by_type.idxmin()
        conclusions.append(f"- **{fastest_type.title()}** l√† lo·∫°i xe di chuy·ªÉn nhanh nh·∫•t (TB **{avg_speed_by_type.max():.1f} km/h**).")
        conclusions.append(f"- **{slowest_type.title()}** l√† lo·∫°i xe di chuy·ªÉn ch·∫≠m nh·∫•t (TB **{avg_speed_by_type.min():.1f} km/h**).")

    # --- 4. ƒê·ªÅ xu·∫•t H√†nh ƒë·ªông ---
    conclusions.append(f"### üí° **ƒê·ªÅ xu·∫•t:**")
    if flow_state == "√ôn t·∫Øc nghi√™m tr·ªçng":
        conclusions.append("- *C·∫ßn xem x√©t ngay c√°c y·∫øu t·ªë g√¢y c·∫£n tr·ªü t·∫°i khu v·ª±c ƒë·ªÉ c√≥ ph∆∞∆°ng √°n ƒëi·ªÅu ti·∫øt.*")
    elif flow_state == "Di chuy·ªÉn ch·∫≠m, m·∫≠t ƒë·ªô cao":
        conclusions.append("- *Khu v·ª±c c√≥ nguy c∆° √πn t·∫Øc v√†o gi·ªù cao ƒëi·ªÉm. C√¢n nh·∫Øc ph√¢n lu·ªìng ho·∫∑c t·ªëi ∆∞u t√≠n hi·ªáu giao th√¥ng.*")
    elif flow_state == "L∆∞u l∆∞·ª£ng th·∫•p, ƒë∆∞·ªùng v·∫Øng":
        conclusions.append("- *L∆∞u l∆∞·ª£ng giao th√¥ng th·∫•p. C√≥ th·ªÉ tranh th·ªß th·ª±c hi·ªán b·∫£o tr√¨ ƒë∆∞·ªùng.*")
    else:
        conclusions.append("- *D√≤ng ch·∫£y ·ªïn ƒë·ªãnh, kh√¥ng c·∫ßn can thi·ªáp.*")

    return conclusions


# --- H√ÄM T·∫¢I D·ªÆ LI·ªÜU ---
@st.cache_data(ttl=60)
def load_analysis_data(video_id: int):
    try:
        with app.app_context():
            logs = (
                db.session.query(VehicleLog)
                .filter_by(video_id=video_id)
                .order_by(VehicleLog.timestamp.asc())
                .all()
            )

            if not logs:
                st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y log trong DB cho Video ID: {video_id}")
                return None

            df = pd.DataFrame([
                {
                    "timestamp": log.timestamp,
                    "vehicle_id": log.vehicle_id,
                    "class_name": log.class_name,
                    "speed_kmh": log.speed_kmh,
                }
                for log in logs
            ])

            if df.empty:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu log trong DB!")
                return None

            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df['time_slot'] = df['timestamp'].dt.floor(freq='5min')
            return df

    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ DB: {e}")
        return None


# --- GIAO DI·ªÜN ---
st.set_page_config(page_title="Dashboard Ph√¢n T√≠ch Th√¥ng minh", page_icon="üß†", layout="wide")

params = st.query_params
video_id_str = params.get("video_id")
if not video_id_str:
    st.warning("Vui l√≤ng truy c·∫≠p dashboard n√†y th√¥ng qua ·ª©ng d·ª•ng web ch√≠nh.")
    st.stop()
try:
    video_id = int(video_id_str)
except (ValueError, TypeError):
    st.error(f"Video ID '{video_id_str}' kh√¥ng h·ª£p l·ªá.")
    st.stop()

df = load_analysis_data(video_id)
if df is None or df.empty:
    st.stop()

st.title(f"üß† Dashboard Ph√¢n t√≠ch Th√¥ng minh cho Video ID: {video_id}")

df_normal_speed = df[df['speed_kmh'] < 150].copy()

# --- KPI ---
st.header("C√°c Ch·ªâ s·ªë Hi·ªáu su·∫•t Ch√≠nh (KPIs)")
if not df_normal_speed.empty:
    col1, col2, col3 = st.columns(3)
    col1.metric("T·ªïng L∆∞·ª£t xe (Duy nh·∫•t)", f"{df_normal_speed['vehicle_id'].nunique():,}")
    col2.metric("T·ªëc ƒë·ªô TB To√†n k·ª≥", f"{df_normal_speed['speed_kmh'].mean():.1f} km/h")
    col3.metric("Lo·∫°i xe Ph·ªï bi·∫øn", f"{df_normal_speed['class_name'].mode()[0].title()}")
st.markdown("---")

# --- Tabs ---
tab1, tab2, tab3 = st.tabs(["üìà Theo th·ªùi gian", "üìä So s√°nh & Ph√¢n b·ªï", "üìù K·∫øt lu·∫≠n"])

with tab1:
    st.header("Di·ªÖn bi·∫øn M·∫≠t ƒë·ªô v√† T·ªëc ƒë·ªô")
    df_resample_base = df_normal_speed.set_index('timestamp')
    density_resampled = df_resample_base.resample('5s')['vehicle_id'].nunique().reset_index(name='count')
    fig_density = px.area(density_resampled, x='timestamp', y='count', title='M·∫≠t ƒë·ªô Ph∆∞∆°ng ti·ªán (xe/5 gi√¢y)')
    st.plotly_chart(fig_density, use_container_width=True)

    speed_resampled = df_resample_base.resample('5s')['speed_kmh'].mean().reset_index()
    fig_speed = px.area(speed_resampled, x='timestamp', y='speed_kmh', title='T·ªëc ƒë·ªô Trung b√¨nh (km/h)')
    st.plotly_chart(fig_speed, use_container_width=True)

with tab2:
    st.header("So s√°nh Hi·ªáu su·∫•t gi·ªØa c√°c Lo·∫°i ph∆∞∆°ng ti·ªán")
    volume_by_type_resampled = df_normal_speed.set_index('timestamp').groupby('class_name').resample('5s')['vehicle_id'].nunique().reset_index(name='count')
    fig_line_compare = px.line(volume_by_type_resampled, x='timestamp', y='count', color='class_name', title="D√≤ng l∆∞u l∆∞·ª£ng chi ti·∫øt", color_discrete_map=Config.DASHBOARD_COLORS)
    st.plotly_chart(fig_line_compare, use_container_width=True)

    col_left, col_right = st.columns(2)
    with col_left:
        st.subheader("T·ª∑ l·ªá c√°c lo·∫°i xe")
        vehicle_types_by_id = df_normal_speed.drop_duplicates(subset=['vehicle_id'])['class_name']
        vehicle_counts = vehicle_types_by_id.value_counts().reset_index()
        fig_pie = px.pie(vehicle_counts, names='class_name', values='count', title='T·ª∑ l·ªá ph·∫ßn trƒÉm', color='class_name', color_discrete_map=Config.DASHBOARD_COLORS, hole=0.4)
        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_pie, use_container_width=True)
    with col_right:
        st.subheader("Ph√¢n b·ªï T·ªëc ƒë·ªô")
        fig_box = px.box(df_normal_speed, x='class_name', y='speed_kmh', color='class_name', color_discrete_map=Config.DASHBOARD_COLORS)
        st.plotly_chart(fig_box, use_container_width=True)

with tab3:
    st.header("üìù K·∫øt lu·∫≠n T·ª± ƒë·ªông")
    with st.spinner("ƒêang ph√¢n t√≠ch..."):
        conclusions = generate_smart_conclusions(df_normal_speed)
        for conclusion in conclusions:
            st.markdown(conclusion)

# --- T√πy ch·ªçn t·∫£i d·ªØ li·ªáu ---
with st.expander("‚öôÔ∏è T·∫£i d·ªØ li·ªáu"):
    if st.button("T·∫°o file CSV"):
        csv = df_normal_speed.to_csv(index=False).encode('utf-8')
        st.download_button(label="T·∫£i CSV", data=csv, file_name=f'analysis_video_{video_id}.csv', mime='text/csv')

    if st.checkbox("Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥"):
        st.dataframe(df_normal_speed)
